# Copyright 2019 IBM Corporation
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#START_TEST parse should fail with no arguments
@@CMD@@
/Parse failed
#END_TEST

#START_TEST complete a space after option
@@CMD@@ --complete
--complete 
#END_TEST

#START_TEST Complete port or services
@@CMD@@ --complete 127.0.0.1 
127.0.0.1:
127.0.0.1 examples.ScalarTypeRpcs 
127.0.0.1 examples.NestedTypeRpcs 
127.0.0.1 examples.ComplexTypeRpcs 
127.0.0.1 examples.StreamingRpcs 
/^127.0.0.1 grpc.reflection.*$
#END_TEST

##############################################################################
# Scalar type RPCs
##############################################################################

#START_TEST complete RPCs
@@CMD@@ --complete 127.0.0.1 examples.ScalarTypeRpcs 
examples.ScalarTypeRpcs incrementNumbers 
examples.ScalarTypeRpcs negateBool 
examples.ScalarTypeRpcs capitalizeString 
examples.ScalarTypeRpcs bitwiseInvertBytes 
#END_TEST

#START_TEST l1 number fields
@@CMD@@ --complete 127.0.0.1 examples.ScalarTypeRpcs incrementNumbers
incrementNumbers m_double=
incrementNumbers m_float=
incrementNumbers m_int32=
incrementNumbers m_int64=
incrementNumbers m_uint32=
incrementNumbers m_uint64=
#END_TEST

#START_TEST l1 bytes field
@@CMD@@ --complete 127.0.0.1 examples.ScalarTypeRpcs bitwiseInvertBytes
bitwiseInvertBytes data=0x
#END_TEST

#START_TEST l1 bytes field
@@CMD@@ --complete 127.0.0.1 examples.ScalarTypeRpcs capitalizeString 
capitalizeString text=
#END_TEST

#START_TEST l1 bool field
@@CMD@@ --complete 127.0.0.1 examples.ScalarTypeRpcs negateBool
negateBool m_bool=true
negateBool m_bool=false
negateBool m_bool=1
negateBool m_bool=0
#END_TEST

#START_TEST l1 bool field only value
@@CMD@@ --complete 127.0.0.1 examples.ScalarTypeRpcs negateBool m_bool=
true
false
1
0
#END_TEST

##############################################################################
# Complex type RPCs
##############################################################################


#START_TEST repeated number field
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs addAllNumbers
addAllNumbers numbers=:
#END_TEST

#START_TEST repeated number field numbers cannot be completed
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs addAllNumbers numbers=:
#END_TEST

#START_TEST repeated number field After number choide: colon or comma
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs addAllNumbers numbers=:324
324, 
324:
#END_TEST

#START_TEST repeated number field After number choide: colon or comma
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs addAllNumbers numbers=:123, 324
324, 
324:
#END_TEST

#START_TEST enum values
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs echoColorEnum color=
white
black
red
green
blue
#END_TEST

#START_TEST oneof input choices again
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs sendNumberOrStringOneOf both=:number=5 str=5:
 number=
 str=
 both=
#END_TEST

#START_TEST oneof input choices
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs sendNumberOrStringOneOf 
sendNumberOrStringOneOf number=
sendNumberOrStringOneOf str=
sendNumberOrStringOneOf both=
#END_TEST

#START_TEST repeated enum complete the only field
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs getLastColor 
getLastColor colors=:white
getLastColor colors=:black
getLastColor colors=:red
getLastColor colors=:green
getLastColor colors=:blue
#END_TEST

#START_TEST repeated enum, complete first element after field name
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs getLastColor colors=:
white
black
red
green
blue
#END_TEST

#START_TEST repeated enum, complete second element
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs getLastColor colors=:black
black, white
black, black
black, red
black, green
black, blue
black:
#END_TEST

#START_TEST repeated enum, complete second element after comma
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs getLastColor colors=:black, 
black, white
black, black
black, red
black, green
black, blue
#END_TEST

#START_TEST repeated enum, complete after last element colon
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs getLastColor colors=:black, white:
 colors=:white
 colors=:black
 colors=:red
 colors=:green
 colors=:blue
#END_TEST

#START_TEST repeated sub message
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs echoNumberAndStrings
echoNumberAndStrings number_and_strings=::number=
echoNumberAndStrings number_and_strings=::str=
#END_TEST

#START_TEST repeated sub message after first element
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs echoNumberAndStrings number_and_strings=::number=5 str=asd
asd number=
asd str=
asd:
#END_TEST

#START_TEST repeated sub message after first element end
@@CMD@@ --complete 127.0.0.1 examples.ComplexTypeRpcs echoNumberAndStrings number_and_strings=::number=5 str=asd:
, :number=
, :str=
:
#END_TEST

#START_TEST Custom Output format modifiers
@@CMD@@ --complete --customOutput @.data:lala/data%
lala/data%default
lala/data%raw
lala/data%dec
lala/data%hex
#END_TEST


####### these tests are actually not completion tests but functional RPC call tests TODO: move to separate file!

#START_TEST Empty request message
@@CMD@@ 127.0.0.1 examples.NestedTypeRpcs getTime
/.* Received message:
/\| seconds = .*
/\| nanos.. = .*
RPC succeeded :D
#END_TEST

#START_TEST Empty request message
@@CMD@@ 127.0.0.1 examples.ScalarTypeRpcs incrementNumbers
Warning: no Fields found in parseTree for message 'Numbers'
/.*Received message:
/ m_double = 1.000000
/ m_float. = 1.000000
/ m_int32. = 1
/ m_int64. = 1
/ m_uint32 = 1
/ m_uint64 = 1
RPC succeeded :D
#END_TEST

// Copyright 2019 IBM Corporation
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto"

service ScalarTypeRpcs
{
    // All numbers given in input are incremented by one.
    rpc incrementNumbers (Numbers) returns (Numbers);

    // A given Bool is negated.
    rpc negateBool (Bool) returns (Bool);

    // A given text is capitalized.
    rpc capitalizeString (String) returns (String);

    // A given data buffer is bitwise inverted.
    rpc bitwiseInvertBytes (Bytes) returns (Bytes);
}

service ComplexTypeRpcs
{
    // TODO: Any, OneOf, Repeated, Map, Enums
}

service NestedTypeRpcs
{
    // TODO: multiple layer nesting, request nesting, response nesting, nesting without data
}

service StreamingRpcs
{
    // Returns a stream of <number> messages of type Empty, then closes the stream.
    rpc replyStreamEmpty (Uint32) returns (stream google.protobuf.Empty);

    // Returns continuous stream of messages containing a timestamp with a frequency of about 10Hz.
    rpc replyStreamTimestamp10Hz (Uint32) returns (stream google.protobuf.Timestamp);

    // The following RPCs are not supported in the current version of gWhisper.
    // gWhisper should print a meaningful error message in an attempt to call them.

    // Receives a stream of numbers, which are all added and returned as a single number.
    rpc requestStreamAddAllNumbers (stream Uint32) returns (Uint32);
    
    // Counts all streamed messages and returns the count.
    rpc requestStreamCountMessages (stream google.protobuf.Empty) returns (Uint32);

    // Received numbers are negated and streamed back.
    rpc bidirectionalStreamNegateNumbers (stream Int32) returns (stream Int32);
}

service CombinedRpcs
{

}

// TODO: packages, namespaces

message Int32
{
    int32 number = 1;
}

message Uint32
{
    uint32 number = 1;
}

message String
{
    string text = 1;
}

message Bytes
{
    bytes data = 1;
}

message Numbers
{
    double m_double = 1;
    float m_float   = 2;
    int32 m_int32   = 3;
    int64 m_int64   = 4;
    uint32 m_uint32 = 5;
    uint64 m_uint64 = 6;
    // For now encoding variants (sint, fixed, sfixed) not provided, as the API
    // is the same as for the above types.
}

message Bool
{
    bool m_bool = 1;
}
